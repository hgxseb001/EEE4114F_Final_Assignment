#ifndef IIR_FILTER
#define IIR_FILTER

//! choose filter:
#define FILTER_10


/** Instructions on getting coefficients:

Use Matlab FilterDesigner Tool.
Select IIR Design method
Select specify order
Click design filter
Click edit, convert structure, Direct Form 1
Click edit, conver to single section
*/

// const float numer_coeff [] = {1,3,3,1};
// const float denom_coeff [] = {-0.7704616129882221,2.495901610139365,-2.721230492607361,1};

float gain = 1;

// const float numer_coeff [] = {1.071, 1.053, 1.028};
// const float denom_coeff [] = {0.148, -0.159, 0.279};


#ifdef FILTER_1
// ! 1 pole:
const float numer_coeff [] = {
0.499999999999999944488848768742172978818,
0.499999999999999944488848768742172978818 ,
0                                         
};

const float denom_coeff [] = {
 1                                        ,
 -0.000000000000000055511151231257827021182,
  0                                        
};

#endif

#ifdef FILTER_2
// ! 2 pole:
const float numer_coeff [] = {
0.292893218813452427262689070630585774779 ,
0.585786437626904854525378141261171549559 ,
0.292893218813452427262689070630585774779 
};

const float denom_coeff [] = {
1,
-0.000000000000000130070718113307607476976,
 0.171572875253809958850936823182564694434
};

#endif

#ifdef FILTER_3
// ! 3 pole:
const float numer_coeff [] = {
0.16666666666666665741480812812369549647 ,
0.5                                       ,
0.5                                       ,
0.16666666666666665741480812812369549647  
};

const float denom_coeff [] = {
1,
-0.000000000000000203540887847945406830838,
 0.333333333333333592385372412536526098847,
 -0.000000000000000018503717077085956720671
};

#endif

#ifdef FILTER_4
// ! 4 pole:
const float numer_coeff [] = {
0.093980851433794448945846511378476861864 ,
0.375923405735177795783386045513907447457 ,
0.563885108602766638163927837013034150004 ,
0.375923405735177795783386045513907447457 ,
0.093980851433794448945846511378476861864 
};

const float denom_coeff [] = {
1                                        ,
-0.000000000000000276004643814194936942384,
0.486028822068269583667188271647319197655,
-0.000000000000000057882412619964346138092,
0.017664800872441901308240730372745019849
};

#endif

#ifdef FILTER_5
// ! 5 pole:
const float numer_coeff [] = {

0.052786404500042058418607382463960675523, 
0.263932022500210305970824720134260132909, 
0.527864045000420611941649440268520265818, 
0.527864045000420611941649440268520265818, 
0.263932022500210305970824720134260132909, 
0.052786404500042058418607382463960675523 
};


const float denom_coeff [] = {
1,                                        
-0.000000000000000347881374152037629442553,
0.633436854000504867556742283341009169817,
-0.000000000000000117862548721086044763841,
0.055728090000841258577768400073182419874,
-0.000000000000000003093530431865846229576
};

#endif

#ifdef FILTER_6
// ! 6 pole:
const float numer_coeff [] = {
0.029588223638660759995389071264071390033 ,
0.177529341831964559972334427584428340197 ,
0.443823354579911399930836068961070850492 ,
0.591764472773215199907781425281427800655 ,
0.443823354579911399930836068961070850492 ,
0.177529341831964559972334427584428340197 ,
0.029588223638660759995389071264071390033 
};

const float denom_coeff [] = {
1                                        ,
-0.000000000000000419408503688564566388034,
0.777695961855673023599422322149621322751,
-0.000000000000000198040558822688954501994,
0.114199425062433759792135390398470917717,
-0.000000000000000013261858603617303348937,
0.001750925956182813447020718555791063409
};

#endif

#ifdef FILTER_7
// ! 7 pole:
const float numer_coeff [] = {
0.016565293819972598532430652085167821497 ,
0.115957056739808203604802372410631505772 ,
0.347871170219424596936619309417437762022 ,
0.579785283699040920879497207351960241795 ,
0.579785283699040920879497207351960241795 ,
0.347871170219424596936619309417437762022 ,
0.115957056739808203604802372410631505772 ,
0.016565293819972598532430652085167821497 
};

const float denom_coeff [] = {
1                                        ,
-0.000000000000000490715579621535620270971,
0.919973003056889560014042217517271637917,
-0.000000000000000298132054345843158335322,
0.192701155038027899246699803370574954897,
-0.000000000000000034650292095791600529193,
0.007683450861576644752570786067735753022,
-0.000000000000000000426517202754919375206,

};

#endif

#ifdef FILTER_8
// ! 8 pole:
const float numer_coeff [] = {
0.009267285584088772246169618540534429485 ,
0.074138284672710191847144756138732191175 ,
0.259483996354485657587218838671105913818 ,
0.518967992708971315174437677342211827636 ,
0.648709990886214060701320249791024252772 ,
0.518967992708971315174437677342211827636 ,
0.259483996354485657587218838671105913818 ,
0.074138284672710191847144756138732191175 ,
0.009267285584088772246169618540534429485 
};

const float denom_coeff [] = {
1                                        ,
-0.000000000000000561876722833502651939565,
1.060935599162234677095284496317617595196,
-0.00000000000000041795268490968279932114 ,
0.290888157274393599482920080845360644162,
-0.000000000000000071394565629046194603123,
0.020429587925904837963919646881549851969,
-0.00000000000000000234441894594109780286 ,
0.000171765164194119502281965505829930407
};

#endif

#ifdef FILTER_9
// ! 9 pole:
const float numer_coeff [] = {
0.005181867354293895160111116382495310972 ,
0.046636806188645053838914833477247157134 ,
0.186547224754580215355659333908988628536 ,
0.435276857760687141407629496825393289328 ,
0.652915286641030823133746707753743976355 ,
0.652915286641030823133746707753743976355 ,
0.435276857760687141407629496825393289328 ,
0.186547224754580215355659333908988628536 ,
0.046636806188645053838914833477247157134 ,
0.005181867354293895160111116382495310972 
};

const float denom_coeff [] = {
1                                        ,
-0.000000000000000632936709702740434595504,
1.200987059932738798551099534961394965649,
-0.000000000000000557382720484388107653042,
0.408501257393950434337881461033248342574,
-0.000000000000000127590877727431170970794,
0.042661105097796955809563712591625517234,
-0.000000000000000007533785766639653719231,
0.000966662973989888710084350531559493902,
-0.000000000000000000053660574538810163485
};

#endif

#ifdef FILTER_10
// ! 10 pole:
const float numer_coeff [] = {
0.002896445902021596401076930504814299638 ,
0.028964459020215965745492781024950090796 ,
0.130340065590971831976929706797818653286 ,
0.347573508242591588945913372299401089549 ,
0.608253639424535363922075248410692438483 ,
0.729904367309442303479727343074046075344 ,
0.60825363942453525289977278589503839612  ,
0.347573508242591588945913372299401089549 ,
0.130340065590971831976929706797818653286 ,
0.028964459020215965745492781024950090796 ,
0.002896445902021596401076930504814299638 

};

const float denom_coeff [] = {
1                                        ,
-0.000000000000000703923948874755479506039,
1.340383267699033487119208984950091689825,
-0.000000000000000716342639633246178473734,
0.545353909523817681481716590496944263577,
-0.00000000000000020729920301166159919453 ,
0.077041166101195615589780629761662567034,
-0.00000000000000001851233148950246974706 ,
0.003165481548343393198435835600434984372,
-0.000000000000000000360753153680534370235,
0.000016778797726675533113658775330456763
};

#endif

const int num_x_coeffs = sizeof(numer_coeff) / sizeof(float);
const int num_y_coeffs = sizeof(denom_coeff) / sizeof(float);

// index 0 = x[n-1], index 1 = x[n-2], ...
float x_vals [num_x_coeffs];
float y_vals [num_y_coeffs];

float current_y;

void initIIRArrays(){
    for (int i=0; i<num_x_coeffs; i++){
        x_vals[i] = 0;
    }

    for (int i=0; i<num_y_coeffs; i++){
        y_vals[i] = 0;
    }
}

float compute_next(float x){

    x_vals[0] = x;
    y_vals[0] = 0;

    for (int i=0; i<num_x_coeffs; i++){   
        y_vals[0] = y_vals[0] + x_vals[i] * numer_coeff[i];
    }

    for (int i=1; i<num_y_coeffs; i++){
        y_vals[0] = y_vals[0] - y_vals[i] * denom_coeff[i];
    }

    y_vals[0] = y_vals[0] * denom_coeff[0];

    for (int i=num_x_coeffs; i>0; i--){
        x_vals[i] = x_vals[i-1];
    }
    for (int i=num_y_coeffs; i>0; i--){
        y_vals[i] = y_vals[i-1];
    }

    return y_vals[0];
}

// float compute_next(float x){
//     current_y = x*numer_coeff[0];
//     for (int i=1; i<num_x_coeffs; i++){
//         current_y = current_y + x_vals[i-1] * numer_coeff[i];
//     }
//     for (int i=1; i<num_y_coeffs; i++){
//         current_y = current_y - y_vals[i-1] * denom_coeff[i];
//     }
//     current_y = current_y / denom_coeff[0];

//     for (int i=num_x_coeffs-1; i>0; i--){
//         x_vals[i] = x_vals[i-1];
//     }
//     x_vals[0] = x;
//     for (int i=num_y_coeffs-1; i>0; i--){
//         y_vals[i] = y_vals[i-1];
//     }
//     y_vals[0] = current_y;
//     return current_y;
// }


#endif